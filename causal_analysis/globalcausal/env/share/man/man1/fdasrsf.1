.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "FDASRSF" "1" "Dec 24, 2021" "2.2" "fdasrsf"
.SH NAME
fdasrsf \- fdasrsf Documentation
[image]
.sp
A python package for functional data analysis using the square root
slope framework and curves using the square root velocity framework
which performs pair\-wise and group\-wise alignment as well as modeling
using functional component analysis and regression.
[image]
.SH USER GUIDE
.sp
Contents:
[image]
.SS Functional Alignment
.sp
Group\-wise function alignment using SRSF framework and Dynamic Programming
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B time_warping.align_fPCA(f, time, num_comp=3, showplot=True, smoothdata=False, cores=\- 1)
aligns a collection of functions while extracting principal components.
The functions are aligned to the principal components
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBnum_comp\fP \-\- number of fPCA components
.IP \(bu 2
\fBshowplot\fP \-\- Shows plots of results using matplotlib (default = T)
.IP \(bu 2
\fBsmooth_data\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel (default = \-1 (all))
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of N
functions with M samples
.TP
.B Return qn
aligned srvfs \- similar structure to fn
.TP
.B Return q0
original srvf \- similar structure to fn
.TP
.B Return mqn
srvf mean or median \- vector of length M
.TP
.B Return gam
warping functions \- similar structure to fn
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.TP
.B Return orig_var
Original Variance of Functions
.TP
.B Return amp_var
Amplitude Variance
.TP
.B Return phase_var
Phase Variance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.align_fPLS(f, g, time, comps=3, showplot=True, smoothdata=False, delta=0.01, max_itr=100)
This function aligns a collection of functions while performing
principal least squares
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBg\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBcomps\fP \-\- number of fPLS components
.IP \(bu 2
\fBshowplot\fP \-\- Shows plots of results using matplotlib (default = T)
.IP \(bu 2
\fBsmooth_data\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBdelta\fP \-\- gradient step size
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of N
.UNINDENT
.sp
functions with M samples
:return gn: aligned functions \- numpy ndarray of shape (M,N) of N
functions with M samples
:return qfn: aligned srvfs \- similar structure to fn
:return qgn: aligned srvfs \- similar structure to fn
:return qf0: original srvf \- similar structure to fn
:return qg0: original srvf \- similar structure to fn
:return gam: warping functions \- similar structure to fn
:return wqf: srsf principal weight functions
:return wqg: srsf principal weight functions
:return wf: srsf principal weight functions
:return wg: srsf principal weight functions
:return cost: cost function value
.UNINDENT
.INDENT 0.0
.TP
.B class  time_warping.fdawarp(f, time)
This class provides alignment methods for functional data using the SRVF framework
.sp
Usage:  obj = fdawarp(f,t)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- (M,N): matrix defining N functions of M samples
.IP \(bu 2
\fBtime\fP \-\- time vector of length M
.IP \(bu 2
\fBfn\fP \-\- aligned functions
.IP \(bu 2
\fBqn\fP \-\- aligned srvfs
.IP \(bu 2
\fBq0\fP \-\- initial srvfs
.IP \(bu 2
\fBfmean\fP \-\- function mean
.IP \(bu 2
\fBmqn\fP \-\- mean srvf
.IP \(bu 2
\fBgam\fP \-\- warping functions
.IP \(bu 2
\fBpsi\fP \-\- srvf of warping functions
.IP \(bu 2
\fBstats\fP \-\- alignment statistics
.IP \(bu 2
\fBqun\fP \-\- cost function
.IP \(bu 2
\fBlambda\fP \-\- lambda
.IP \(bu 2
\fBmethod\fP \-\- optimization method
.IP \(bu 2
\fBgamI\fP \-\- inverse warping function
.IP \(bu 2
\fBrsamps\fP \-\- random samples
.IP \(bu 2
\fBfs\fP \-\- random aligned functions
.IP \(bu 2
\fBgams\fP \-\- random warping functions
.IP \(bu 2
\fBft\fP \-\- random warped functions
.IP \(bu 2
\fBqs\fP \-\- random aligned srvfs
.IP \(bu 2
\fBtype\fP \-\- alignment type
.IP \(bu 2
\fBmcmc\fP \-\- mcmc output if bayesian
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  15\-Mar\-2018
.INDENT 7.0
.TP
.B gauss_model(n=1, sort_samples=False)
This function models the functional data using a Gaussian model
extracted from the principal components of the srvfs
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBn\fP (\fIinteger\fP) \-\- number of random samples
.IP \(bu 2
\fBsort_samples\fP (\fI\%bool\fP) \-\- sort samples (default = T)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B joint_gauss_model(n=1, no=3)
This function models the functional data using a joint Gaussian model
extracted from the principal components of the srsfs
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBn\fP (\fIinteger\fP) \-\- number of random samples
.IP \(bu 2
\fBno\fP (\fIinteger\fP) \-\- number of principal components (default = 3)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B multiple_align_functions(mu, omethod=\(aqDP2\(aq, smoothdata=False, parallel=False, lam=0.0, cores=\- 1, grid_dim=7)
This function aligns a collection of functions using the elastic square\-root
slope (srsf) framework.
.INDENT 7.0
.TP
.B Usage:  obj.multiple_align_functions(mu)
obj.multiple_align_functions(lambda)
.UNINDENT
.sp
obj.multiple_align_functions(lambda, ...)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmu\fP \-\- vector of function to align to
.IP \(bu 2
\fBomethod\fP \-\- optimization method (DP, DP2, RBFGS) (default = DP)
.IP \(bu 2
\fBsmoothdata\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBparallel\fP \-\- run in parallel (default = F)
.IP \(bu 2
\fBlam\fP (\fIdouble\fP) \-\- controls the elasticity (default = 0)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel (default = \-1 (all))
.IP \(bu 2
\fBgrid_dim\fP \-\- size of the grid, for the DP2 method only (default = 7)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot plot functional alignment results
.sp
Usage: obj.plot()
.UNINDENT
.INDENT 7.0
.TP
.B srsf_align(method=\(aqmean\(aq, omethod=\(aqDP2\(aq, center=True, smoothdata=False, MaxItr=20, parallel=False, lam=0.0, cores=\- 1, grid_dim=7)
This function aligns a collection of functions using the elastic
square\-root slope (srsf) framework.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmethod\fP \-\- (string) warp calculate Karcher Mean or Median 
(options = "mean" or "median") (default="mean")
.IP \(bu 2
\fBomethod\fP \-\- optimization method (DP, DP2, RBFGS) (default = DP2)
.IP \(bu 2
\fBcenter\fP \-\- center warping functions (default = T)
.IP \(bu 2
\fBsmoothdata\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBMaxItr\fP \-\- Maximum number of iterations (default = 20)
.IP \(bu 2
\fBparallel\fP \-\- run in parallel (default = F)
.IP \(bu 2
\fBlam\fP (\fIdouble\fP) \-\- controls the elasticity (default = 0)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel (default = \-1 (all))
.IP \(bu 2
\fBgrid_dim\fP \-\- size of the grid, for the DP2 method only (default = 7)
.UNINDENT
.UNINDENT
.sp
Examples
>>> import tables
>>> fun=tables.open_file("../Data/simu_data.h5")
>>> f = fun.root.f[:]
>>> f = f.transpose()
>>> time = fun.root.time[:]
>>> obj = fs.fdawarp(f,time)
>>> obj.srsf_align()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.normal(loc=0.0, scale=1.0, size=None)
Draw random samples from a normal (Gaussian) distribution.
.sp
The probability density function of the normal distribution, first
derived by De Moivre and 200 years later by both Gauss and Laplace
independently [2], is often called the bell curve because of
its characteristic shape (see the example below).
.sp
The normal distributions occurs often in nature.  For example, it
describes the commonly occurring distribution of samples influenced
by a large number of tiny, random disturbances, each with its own
unique distribution [2]\&.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
New code should use the \fBnormal\fP method of a \fBdefault_rng()\fP
instance instead; please see the random\-quick\-start\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B loc
float or array_like of floats
Mean ("centre") of the distribution.
.TP
.B scale
float or array_like of floats
Standard deviation (spread or "width") of the distribution. Must be
non\-negative.
.TP
.B size
int or tuple of ints, optional
Output shape.  If the given shape is, e.g., \fB(m, n, k)\fP, then
\fBm * n * k\fP samples are drawn.  If size is \fBNone\fP (default),
a single value is returned if \fBloc\fP and \fBscale\fP are both scalars.
Otherwise, \fBnp.broadcast(loc, scale).size\fP samples are drawn.
.UNINDENT
.INDENT 7.0
.TP
.B out
ndarray or scalar
Drawn samples from the parameterized normal distribution.
.UNINDENT
.INDENT 7.0
.TP
.B scipy.stats.norm
probability density function, distribution or
cumulative density function, etc.
.UNINDENT
.sp
Generator.normal: which should be used for new code.
.sp
The probability density for the Gaussian distribution is
.sp
.ce
p(x) = \efrac{1}{\esqrt{ 2 \epi \esigma^2 }}
e^{ \- \efrac{ (x \- \emu)^2 } {2 \esigma^2} },


.ce 0
.sp
where \emu is the mean and \esigma the standard
deviation. The square of the standard deviation, \esigma^2,
is called the variance.
.sp
The function has its peak at the mean, and its "spread" increases with
the standard deviation (the function reaches 0.607 times its maximum at
x + \esigma and x \- \esigma [2]).  This implies that
normal is more likely to return samples lying close to the mean, rather
than those far away.
.IP [1] 5
Wikipedia, "Normal distribution",
\fI\%https://en.wikipedia.org/wiki/Normal_distribution\fP
.IP [2] 5
P. R. Peebles Jr., "Central Limit Theorem" in "Probability,
Random Variables and Random Signal Principles", 4th ed., 2001,
pp. 51, 51, 125.
.sp
Draw samples from the distribution:
.sp
.nf
.ft C
>>> mu, sigma = 0, 0.1 # mean and standard deviation
>>> s = np.random.normal(mu, sigma, 1000)
.ft P
.fi
.sp
Verify the mean and the variance:
.sp
.nf
.ft C
>>> abs(mu \- np.mean(s))
0.0  # may vary
.ft P
.fi
.sp
.nf
.ft C
>>> abs(sigma \- np.std(s, ddof=1))
0.1  # may vary
.ft P
.fi
.sp
Display the histogram of the samples, along with
the probability density function:
.sp
.nf
.ft C
>>> import matplotlib.pyplot as plt
>>> count, bins, ignored = plt.hist(s, 30, density=True)
>>> plt.plot(bins, 1/(sigma * np.sqrt(2 * np.pi)) *
\&...                np.exp( \- (bins \- mu)**2 / (2 * sigma**2) ),
\&...          linewidth=2, color=\(aqr\(aq)
>>> plt.show()
.ft P
.fi
.sp
Two\-by\-four array of samples from N(3, 6.25):
.sp
.nf
.ft C
>>> np.random.normal(3, 2.5, size=(2, 4))
array([[\-4.49401501,  4.00950034, \-1.81814867,  7.29718677],   # random
       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random
.ft P
.fi
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.pairwise_align_bayes(f1i, f2i, time, mcmcopts=None)
This function aligns two functions using Bayesian framework. It will align
f2 to f1. It is based on mapping warping functions to a hypersphere, and a
subsequent exponential mapping to a tangent space. In the tangent space,
the Z\-mixture pCN algorithm is used to explore both local and global
structure in the posterior distribution.
.sp
The Z\-mixture pCN algorithm uses a mixture distribution for the proposal
distribution, controlled by input parameter zpcn. The zpcn$betas must be
between 0 and 1, and are the coefficients of the mixture components, with
larger coefficients corresponding to larger shifts in parameter space. The
zpcn["probs"] give the probability of each shift size.
.INDENT 7.0
.TP
.B Usage:  out = pairwise_align_bayes(f1i, f2i, time)
out = pairwise_align_bayes(f1i, f2i, time, mcmcopts)
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf1i\fP \-\- vector defining M samples of function 1
.IP \(bu 2
\fBf2i\fP \-\- vector defining M samples of function 2
.IP \(bu 2
\fBtime\fP \-\- time vector of length M
.IP \(bu 2
\fBmcmopts\fP \-\- dict of mcmc parameters
.UNINDENT
.UNINDENT
.sp
default mcmc options:
tmp = {"betas":np.array([0.5,0.5,0.005,0.0001]),"probs":np.array([0.1,0.1,0.7,0.1])}
mcmcopts = {"iter":2*(10**4) ,"burnin":np.minimum(5*(10**3),2*(10**4)//2),
.INDENT 7.0
.INDENT 3.5
"alpha0":0.1, "beta0":0.1,"zpcn":tmp,"propvar":1,
"initcoef":np.repeat(0,20), "npoints":200, "extrainfo":True}
.UNINDENT
.UNINDENT
.sp
:rtype collection containing
:return f2_warped: aligned f2
:return gamma: warping function
:return g_coef: final g_coef
:return psi: final psi
:return sigma1: final sigma
.sp
if extrainfo
:return accept: accept of psi samples
:return betas_ind
:return logl: log likelihood
:return gamma_mat: posterior gammas
:return gamma_stats: posterior gamma stats
:return xdist: phase distance posterior
:return ydist: amplitude distance posterior)
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.pairwise_align_bayes_infHMC(y1i, y2i, time, mcmcopts=None)
This function aligns two functions using Bayesian framework. It uses a 
hierarchical Bayesian framework assuming mearsurement error error It will 
align f2 to f1. It is based on mapping warping functions to a hypersphere, 
and a subsequent exponential mapping to a tangent space. In the tangent space,
the infty\-HMC algorithm is used to explore both local and global
structure in the posterior distribution.
.INDENT 7.0
.TP
.B Usage:  out = pairwise_align_bayes_infHMC(f1i, f2i, time)
out = pairwise_align_bayes_infHMC(f1i, f2i, time, mcmcopts)
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBy1i\fP \-\- vector defining M samples of function 1
.IP \(bu 2
\fBy2i\fP \-\- vector defining M samples of function 2
.IP \(bu 2
\fBtime\fP \-\- time vector of length M
.IP \(bu 2
\fBmcmopts\fP \-\- dict of mcmc parameters
.UNINDENT
.UNINDENT
.sp
default mcmc options:
mcmcopts = {"iter":1*(10**4), "nchains":4, "vpriorvar":1,
.INDENT 7.0
.INDENT 3.5
"burnin":np.minimum(5*(10**3),2*(10**4)//2),
"alpha0":0.1, "beta0":0.1, "alpha":1, "beta":1,
"h":0.01, "L":4, "f1propvar":0.0001, "f2propvar":0.0001,
"L1propvar":0.3, "L2propvar":0.3, "npoints":200, "thin":1,
"sampfreq":1, "initcoef":np.repeat(0,20), "nbasis":10, 
"basis":\(aqfourier\(aq, "extrainfo":True}
.UNINDENT
.UNINDENT
.sp
Basis can be \(aqfourier\(aq or \(aqlegendre\(aq
.sp
:rtype collection containing
:return f2_warped: aligned f2
:return gamma: warping function
:return v_coef: final v_coef
:return psi: final psi
:return sigma1: final sigma
.sp
if extrainfo
:return theta_accept: accept of psi samples
:return f2_accept: accept of f2 samples
:return SSE: SSE
:return gamma_mat: posterior gammas
:return gamma_stats: posterior gamma stats
:return xdist: phase distance posterior
:return ydist: amplitude distance posterior)
.INDENT 7.0
.IP J. 3
.INDENT 3.0
.IP D. 3
Tucker, L. Shand, and K. Chowdhary. “Multimodal Bayesian Registration of Noisy Functions using Hamiltonian Monte Carlo”, Computational Statistics and Data Analysis, accepted, 2021.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.pairwise_align_functions(f1, f2, time, omethod=\(aqDP2\(aq, lam=0, grid_dim=7)
.INDENT 7.0
.TP
.B This function aligns f2 to f1 using the elastic square\-root
slope (srsf) framework.
.TP
.B Usage:  out = pairwise_align_functions(f1, f2, time)
out = pairwise_align_functions(f1, f2, time, omethod, lam, grid_dim)
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf1\fP \-\- vector defining M samples of function 1
.IP \(bu 2
\fBf2\fP \-\- vector defining M samples of function 2
.IP \(bu 2
\fBtime\fP \-\- time vector of length M
.IP \(bu 2
\fBomethod\fP \-\- optimization method (DP, DP2, RBFGS) (default = DP)
.IP \(bu 2
\fBlam\fP \-\- controls the elasticity (default = 0)
.IP \(bu 2
\fBgrid_dim\fP \-\- size of the grid, for the DP2 method only (default = 7)
.UNINDENT
.UNINDENT
.sp
:rtype list containing
:return f2n: aligned f2
:return gam: warping function
:return q2n: aligned q2 (srsf)
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.rand(d0, d1, \&..., dn)
Random values in a given shape.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This is a convenience function for users porting code from Matlab,
and wraps \fIrandom_sample\fP\&. That function takes a
tuple to specify the size of the output, which is consistent with
other NumPy functions like \fInumpy.zeros\fP and \fInumpy.ones\fP\&.
.UNINDENT
.UNINDENT
.sp
Create an array of the given shape and populate it with
random samples from a uniform distribution
over \fB[0, 1)\fP\&.
.INDENT 7.0
.TP
.B d0, d1, ..., dn
int, optional
The dimensions of the returned array, must be non\-negative.
If no argument is given a single Python float is returned.
.UNINDENT
.INDENT 7.0
.TP
.B out
ndarray, shape \fB(d0, d1, ..., dn)\fP
Random values.
.UNINDENT
.sp
random
.sp
.nf
.ft C
>>> np.random.rand(3,2)
array([[ 0.14022471,  0.96360618],  #random
       [ 0.37601032,  0.25528411],  #random
       [ 0.49313049,  0.94909878]]) #random
.ft P
.fi
.UNINDENT
[image]
.SH FUNCTIONAL PRINCIPAL COMPONENT ANALYSIS
.sp
Vertical and Horizontal Functional Principal Component Analysis using SRSF
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B class  fPCA.fdahpca(fdawarp)
This class provides horizontal fPCA using the
SRVF framework
.sp
Usage:  obj = fdahpca(warp_data)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBwarp_data\fP \-\- fdawarp class with alignment data
.IP \(bu 2
\fBgam_pca\fP \-\- warping functions principal directions
.IP \(bu 2
\fBpsi_pca\fP \-\- srvf principal directions
.IP \(bu 2
\fBlatent\fP \-\- latent values
.IP \(bu 2
\fBU\fP \-\- eigenvectors
.IP \(bu 2
\fBcoef\fP \-\- coefficients
.IP \(bu 2
\fBvec\fP \-\- shooting vectors
.IP \(bu 2
\fBmu\fP \-\- Karcher Mean
.IP \(bu 2
\fBtau\fP \-\- principal directions
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  15\-Mar\-2018
.INDENT 7.0
.TP
.B calc_fpca(no=3, stds=array([\- 1, 0, 1]))
This function calculates horizontal functional principal component analysis on aligned data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBno\fP (\fI\%int\fP) \-\- number of components to extract (default = 3)
.IP \(bu 2
\fBstds\fP \-\- number of standard deviations along gedoesic to compute (default = \-1,0,1)
.UNINDENT
.TP
.B Return type
fdahpca object of numpy ndarray
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot plot elastic horizontal fPCA results
.sp
Usage: obj.plot()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  fPCA.fdajpca(fdawarp)
This class provides joint fPCA using the
SRVF framework
.sp
Usage:  obj = fdajpca(warp_data)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBwarp_data\fP \-\- fdawarp class with alignment data
.IP \(bu 2
\fBq_pca\fP \-\- srvf principal directions
.IP \(bu 2
\fBf_pca\fP \-\- f principal directions
.IP \(bu 2
\fBlatent\fP \-\- latent values
.IP \(bu 2
\fBcoef\fP \-\- principal coefficients
.IP \(bu 2
\fBid\fP \-\- point used for f(0)
.IP \(bu 2
\fBmqn\fP \-\- mean srvf
.IP \(bu 2
\fBU\fP \-\- eigenvectors
.IP \(bu 2
\fBmu_psi\fP \-\- mean psi
.IP \(bu 2
\fBmu_g\fP \-\- mean g
.IP \(bu 2
\fBC\fP \-\- scaling value
.IP \(bu 2
\fBstds\fP \-\- geodesic directions
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  18\-Mar\-2018
.INDENT 7.0
.TP
.B calc_fpca(no=3, stds=array([\- 1., 0., 1.]), id=None, parallel=False, cores=\- 1)
This function calculates joint functional principal component analysis
on aligned data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBno\fP (\fI\%int\fP) \-\- number of components to extract (default = 3)
.IP \(bu 2
\fBid\fP (\fI\%int\fP) \-\- point to use for f(0) (default = midpoint)
.IP \(bu 2
\fBstds\fP \-\- number of standard deviations along gedoesic to compute (default = \-1,0,1)
.IP \(bu 2
\fBparallel\fP (\fI\%bool\fP) \-\- run in parallel (default = F)
.IP \(bu 2
\fBcores\fP (\fI\%int\fP) \-\- number of cores for parallel (default = \-1 (all))
.UNINDENT
.TP
.B Return type
fdajpca object of numpy ndarray
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot plot elastic vertical fPCA result
.sp
Usage: obj.plot()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  fPCA.fdavpca(fdawarp)
This class provides vertical fPCA using the
SRVF framework
.sp
Usage:  obj = fdavpca(warp_data)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBwarp_data\fP \-\- fdawarp class with alignment data
.IP \(bu 2
\fBq_pca\fP \-\- srvf principal directions
.IP \(bu 2
\fBf_pca\fP \-\- f principal directions
.IP \(bu 2
\fBlatent\fP \-\- latent values
.IP \(bu 2
\fBcoef\fP \-\- principal coefficients
.IP \(bu 2
\fBid\fP \-\- point used for f(0)
.IP \(bu 2
\fBmqn\fP \-\- mean srvf
.IP \(bu 2
\fBU\fP \-\- eigenvectors
.IP \(bu 2
\fBstds\fP \-\- geodesic directions
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  15\-Mar\-2018
.INDENT 7.0
.TP
.B calc_fpca(no=3, id=None, stds=array([\- 1, 0, 1]))
This function calculates vertical functional principal component analysis
on aligned data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBno\fP (\fI\%int\fP) \-\- number of components to extract (default = 3)
.IP \(bu 2
\fBid\fP (\fI\%int\fP) \-\- point to use for f(0) (default = midpoint)
.IP \(bu 2
\fBstds\fP \-\- number of standard deviations along gedoesic to compute (default = \-1,0,1)
.UNINDENT
.TP
.B Return type
fdavpca object containing
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot plot elastic vertical fPCA result
Usage: obj.plot()
.UNINDENT
.UNINDENT
[image]
.SH ELASTIC FUNCTIONAL BOXPLOTS
.sp
Elastic Functional Boxplots
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B class  boxplots.ampbox(fdawarp)
This class provides amplitude boxplot for functional data using the
SRVF framework
.sp
Usage:  obj = ampbox(warp_data)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBwarp_data\fP (\fIfdawarp\fP) \-\- fdawarp class with alignment data
.IP \(bu 2
\fBQ1\fP \-\- First quartile
.IP \(bu 2
\fBQ3\fP \-\- Second quartile
.IP \(bu 2
\fBQ1a\fP \-\- First quantile based on alpha
.IP \(bu 2
\fBQ3a\fP \-\- Second quantile based on alpha
.IP \(bu 2
\fBminn\fP \-\- minimum extreme function
.IP \(bu 2
\fBmaxx\fP \-\- maximum extreme function
.IP \(bu 2
\fBoutlier_index\fP \-\- indexes of outlier functions
.IP \(bu 2
\fBf_median\fP \-\- median function
.IP \(bu 2
\fBq_median\fP \-\- median srvf
.IP \(bu 2
\fBplt\fP \-\- surface plot mesh
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  15\-Mar\-2018
.INDENT 7.0
.TP
.B construct_boxplot(alpha=0.05, k_a=1)
This function constructs the amplitude boxplot using the elastic
square\-root slope (srsf) framework.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- quantile value (e.g.,=.05, i.e., 95%)
.IP \(bu 2
\fBk_a\fP \-\- scalar for outlier cutoff (e.g.,=1)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot box plot and surface plot
.sp
Usage: obj.plot()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  boxplots.phbox(fdawarp)
This class provides phase boxplot for functional data using the
SRVF framework
.sp
Usage:  obj = phbox(warp_data)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBwarp_data\fP (\fIfdawarp\fP) \-\- fdawarp class with alignment data
.IP \(bu 2
\fBQ1\fP \-\- First quartile
.IP \(bu 2
\fBQ3\fP \-\- Second quartile
.IP \(bu 2
\fBQ1a\fP \-\- First quantile based on alpha
.IP \(bu 2
\fBQ3a\fP \-\- Second quantile based on alpha
.IP \(bu 2
\fBminn\fP \-\- minimum extreme function
.IP \(bu 2
\fBmaxx\fP \-\- maximum extreme function
.IP \(bu 2
\fBoutlier_index\fP \-\- indexes of outlier functions
.IP \(bu 2
\fBmedian_x\fP \-\- median warping function
.IP \(bu 2
\fBpsi_median\fP \-\- median srvf of warping function
.IP \(bu 2
\fBplt\fP \-\- surface plot mesh
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  15\-Mar\-2018
.INDENT 7.0
.TP
.B construct_boxplot(alpha=0.05, k_a=1)
This function constructs phase boxplot for functional data using the elastic
square\-root slope (srsf) framework.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- quantile value (e.g.,=.05, i.e., 95%)
.IP \(bu 2
\fBk_a\fP \-\- scalar for outlier cutoff (e.g.,=1)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot box plot and surface plot
.sp
Usage: obj.plot()
.UNINDENT
.UNINDENT
[image]
.SH FUNCTIONAL PRINCIPAL LEAST SQUARES
.sp
Partial Least Squares using SVD
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B fPLS.pls_svd(time, qf, qg, no, alpha=0.0)
This function computes the partial least squares using SVD
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtime\fP \-\- vector describing time samples
.IP \(bu 2
\fBqf\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBqg\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBno\fP \-\- number of components
.IP \(bu 2
\fBalpha\fP \-\- amount of smoothing (Default = 0.0 i.e., none)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return wqf
f weight function
.TP
.B Return wqg
g weight function
.TP
.B Return alpha
smoothing value
.TP
.B Return values
singular values
.UNINDENT
.UNINDENT
[image]
.SH ELASTIC REGRESSION
.sp
Warping Invariant Regression using SRSF
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B class  regression.elastic_logistic(f, y, time)
This class provides elastic logistic regression for functional data using the
SRVF framework accounting for warping
.sp
Usage:  obj = elastic_logistic(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy array of N responses
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBalpha\fP \-\- alpha parameter of model
.IP \(bu 2
\fBbeta\fP \-\- beta(t) of model
.IP \(bu 2
\fBfn\fP \-\- aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBqn\fP \-\- aligned srvfs \- similar structure to fn
.IP \(bu 2
\fBgamma\fP \-\- calculated warping functions
.IP \(bu 2
\fBq\fP \-\- original training SRSFs
.IP \(bu 2
\fBb\fP \-\- basis coefficients
.IP \(bu 2
\fBLoss\fP \-\- logistic loss
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  29\-Oct\-2021
.INDENT 7.0
.TP
.B calc_model(B=None, lam=0, df=20, max_itr=20, cores=\- 1, smooth=False)
This function identifies a regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBlam\fP \-\- regularization parameter (default 0)
.IP \(bu 2
\fBdf\fP \-\- number of degrees of freedom B\-spline (default 20)
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations (default 20)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel processing (default all)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  regression.elastic_mlogistic(f, y, time)
This class provides elastic multinomial logistic regression for functional data using the
SRVF framework accounting for warping
.sp
Usage:  obj = elastic_mlogistic(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy array of N responses
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBalpha\fP \-\- alpha parameter of model
.IP \(bu 2
\fBbeta\fP \-\- beta(t) of model
.IP \(bu 2
\fBfn\fP \-\- aligned functions \- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBqn\fP \-\- aligned srvfs \- similar structure to fn
.IP \(bu 2
\fBgamma\fP \-\- calculated warping functions
.IP \(bu 2
\fBq\fP \-\- original training SRSFs
.IP \(bu 2
\fBb\fP \-\- basis coefficients
.IP \(bu 2
\fBLoss\fP \-\- logistic loss
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  29\-Oct\-2021
.INDENT 7.0
.TP
.B calc_model(B=None, lam=0, df=20, max_itr=20, delta=0.01, cores=\- 1, smooth=False)
This function identifies a regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBlam\fP \-\- regularization parameter (default 0)
.IP \(bu 2
\fBdf\fP \-\- number of degrees of freedom B\-spline (default 20)
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations (default 20)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel processing (default all)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  regression.elastic_regression(f, y, time)
This class provides elastic regression for functional data using the
SRVF framework accounting for warping
.sp
Usage:  obj = elastic_regression(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy array of N responses
.IP \(bu 2
\fBtime\fP \-\- vector of size M describing the sample points
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBalpha\fP \-\- alpha parameter of model
.IP \(bu 2
\fBbeta\fP \-\- beta(t) of model
.IP \(bu 2
\fBfn\fP \-\- aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBqn\fP \-\- aligned srvfs \- similar structure to fn
.IP \(bu 2
\fBgamma\fP \-\- calculated warping functions
.IP \(bu 2
\fBq\fP \-\- original training SRSFs
.IP \(bu 2
\fBb\fP \-\- basis coefficients
.IP \(bu 2
\fBSSE\fP \-\- sum of squared error
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  29\-Oct\-2021
.INDENT 7.0
.TP
.B calc_model(B=None, lam=0, df=20, max_itr=20, cores=\- 1, smooth=False)
This function identifies a regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBlam\fP \-\- regularization parameter (default 0)
.IP \(bu 2
\fBdf\fP \-\- number of degrees of freedom B\-spline (default 20)
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations (default 20)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel processing (default all)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.logistic_warp(beta, time, q, y)
calculates optimal warping for function logistic regression
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) responses
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return gamma
warping function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.logit_gradient(b, X, y)
calculates gradient of the logistic loss
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBb\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBX\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) responses
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return grad
gradient of logistic loss
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.logit_hessian(s, b, X, y)
calculates hessian of the logistic loss
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBs\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBb\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBX\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) responses
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return out
hessian of logistic loss
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.logit_loss(b, X, y)
logistic loss function, returns Sum{\-log(phi(t))}
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBb\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBX\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) of N responses
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return out
loss value
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.mlogit_gradient(b, X, Y)
calculates gradient of the multinomial logistic loss
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBb\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBX\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) responses
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return grad
gradient
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.mlogit_loss(b, X, Y)
calculates multinomial logistic loss (negative log\-likelihood)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBb\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBX\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) responses
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return nll
negative log\-likelihood
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.mlogit_warp_grad(alpha, beta, time, q, y, max_itr=8000, tol=1e\-10, delta=0.008, display=0)
calculates optimal warping for functional multinomial logistic regression
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- scalar
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBtime\fP \-\- vector of size M describing the sample points
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) responses
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations (Default=8000)
.IP \(bu 2
\fBtol\fP \-\- stopping tolerance (Default=1e\-10)
.IP \(bu 2
\fBdelta\fP \-\- gradient step size (Default=0.008)
.IP \(bu 2
\fBdisplay\fP \-\- display iterations (Default=0)
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return gam_old
warping function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.phi(t)
calculates logistic function, returns 1 / (1 + exp(\-t))
.INDENT 7.0
.TP
.B Parameters
\fBt\fP \-\- scalar
.TP
.B Return type
numpy array
.TP
.B Return out
return value
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.regression_warp(beta, time, q, y, alpha)
calculates optimal warping for function linear regression
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBy\fP \-\- numpy ndarray of shape (1,N) of M functions with N samples responses
.IP \(bu 2
\fBalpha\fP \-\- numpy scalar
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return gamma_new
warping function
.UNINDENT
.UNINDENT
[image]
.SH ELASTIC PRINCIPAL COMPONENT REGRESSION
.sp
Warping Invariant PCR Regression using SRSF
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B class  pcr_regression.elastic_lpcr_regression(f, y, time)
This class provides elastic logistic pcr regression for functional 
data using the SRVF framework accounting for warping
.sp
Usage:  obj = elastic_lpcr_regression(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- (M,N) % matrix defining N functions of M samples
.IP \(bu 2
\fBy\fP \-\- response vector of length N (\-1/1)
.IP \(bu 2
\fBwarp_data\fP \-\- fdawarp object of alignment
.IP \(bu 2
\fBpca\fP \-\- class dependent on fPCA method used object of fPCA
.UNINDENT
.UNINDENT
.sp
:param information
:param alpha: intercept
:param b: coefficient vector
:param Loss: logistic loss
:param PC: probability of classification
:param ylabels: predicted labels
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  18\-Mar\-2018
.INDENT 7.0
.TP
.B calc_model(pca_method=\(aqcombined\(aq, no=5, smooth_data=False, sparam=25, parallel=False)
This function identifies a logistic regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpca_method\fP \-\- string specifing pca method (options = "combined",
"vert", or "horiz", default = "combined")
.IP \(bu 2
\fBno\fP \-\- scalar specify number of principal components (default=5)
.IP \(bu 2
\fBsmooth_data\fP \-\- smooth data using box filter (default = F)
.IP \(bu 2
\fBsparam\fP \-\- number of times to apply box filter (default = 25)
.IP \(bu 2
\fBparallel\fP \-\- calculate in parallel (default = F)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pcr_regression.elastic_mlpcr_regression(f, y, time)
This class provides elastic multinomial logistic pcr regression for functional
data using the SRVF framework accounting for warping
.sp
Usage:  obj = elastic_mlpcr_regression(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- (M,N) % matrix defining N functions of M samples
.IP \(bu 2
\fBy\fP \-\- response vector of length N
.IP \(bu 2
\fBY\fP \-\- coded label matrix
.IP \(bu 2
\fBwarp_data\fP \-\- fdawarp object of alignment
.IP \(bu 2
\fBpca\fP \-\- class dependent on fPCA method used object of fPCA
.UNINDENT
.UNINDENT
.sp
:param information
:param alpha: intercept
:param b: coefficient vector
:param Loss: logistic loss
:param PC: probability of classification
:param ylabels: predicted labels
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  18\-Mar\-2018
.INDENT 7.0
.TP
.B calc_model(pca_method=\(aqcombined\(aq, no=5, smooth_data=False, sparam=25, parallel=False)
This function identifies a logistic regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBy\fP \-\- numpy array of N responses
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBpca_method\fP \-\- string specifing pca method (options = "combined",
"vert", or "horiz", default = "combined")
.IP \(bu 2
\fBno\fP \-\- scalar specify number of principal components (default=5)
.IP \(bu 2
\fBsmooth_data\fP \-\- smooth data using box filter (default = F)
.IP \(bu 2
\fBsparam\fP \-\- number of times to apply box filter (default = 25)
.IP \(bu 2
\fBparallel\fP \-\- run model in parallel (default = F)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class  pcr_regression.elastic_pcr_regression(f, y, time)
This class provides elastic pcr regression for functional data using the
SRVF framework accounting for warping
.sp
Usage:  obj = elastic_pcr_regression(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- (M,N) % matrix defining N functions of M samples
.IP \(bu 2
\fBy\fP \-\- response vector of length N
.IP \(bu 2
\fBwarp_data\fP \-\- fdawarp object of alignment
.IP \(bu 2
\fBpca\fP \-\- class dependent on fPCA method used object of fPCA
.IP \(bu 2
\fBalpha\fP \-\- intercept
.IP \(bu 2
\fBb\fP \-\- coefficient vector
.IP \(bu 2
\fBSSE\fP \-\- sum of squared errors
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  18\-Mar\-2018
.INDENT 7.0
.TP
.B calc_model(pca_method=\(aqcombined\(aq, no=5, smooth_data=False, sparam=25, parallel=False, C=None)
This function identifies a regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpca_method\fP \-\- string specifing pca method (options = "combined",
"vert", or "horiz", default = "combined")
.IP \(bu 2
\fBno\fP \-\- scalar specify number of principal components (default=5)
.IP \(bu 2
\fBsmooth_data\fP \-\- smooth data using box filter (default = F)
.IP \(bu 2
\fBsparam\fP \-\- number of times to apply box filter (default = 25)
.IP \(bu 2
\fBparallel\fP \-\- run in parallel (default = F)
.IP \(bu 2
\fBC\fP \-\- scale balance parameter for combined method (default = None)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
[image]
.SH ELASTIC GLM REGRESSION
.sp
Warping Invariant GML Regression using SRSF
.sp
moduleauthor:: Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B class  elastic_glm_regression.elastic_glm_regression(f, y, time)
This class provides elastic glm regression for functional data using the
SRVF framework accounting for warping
.sp
Usage:  obj = elastic_glm_regression(f,y,time)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- (M,N) % matrix defining N functions of M samples
.IP \(bu 2
\fBy\fP \-\- response vector of length N
.IP \(bu 2
\fBtime\fP \-\- time vector of length M
.IP \(bu 2
\fBalpha\fP \-\- intercept
.IP \(bu 2
\fBb\fP \-\- coefficient vector
.IP \(bu 2
\fBB\fP \-\- basis matrix
.IP \(bu 2
\fBlambda\fP \-\- regularization parameter
.IP \(bu 2
\fBSSE\fP \-\- sum of squared errors
.UNINDENT
.UNINDENT
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  18\-Mar\-2018
.INDENT 7.0
.TP
.B calc_model(link=\(aqlinear\(aq, B=None, lam=0, df=20, max_itr=20, smooth_data=False, sparam=25, parallel=False)
This function identifies a regression model with phase\-variability
using elastic pca
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBlink\fP \-\- string of link function (\(aqlinear\(aq, \(aqquadratic\(aq, \(aqcubic\(aq)
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.IP \(bu 2
\fBlam\fP \-\- regularization parameter (default 0)
.IP \(bu 2
\fBdf\fP \-\- number of degrees of freedom B\-spline (default 20)
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations (default 20)
.IP \(bu 2
\fBsmooth_data\fP \-\- smooth data using box filter (default = F)
.IP \(bu 2
\fBsparam\fP \-\- number of times to apply box filter (default = 25)
.IP \(bu 2
\fBparallel\fP \-\- run in parallel (default = F)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B predict(newdata=None, parallel=True)
This function performs prediction on regression model on new data if available or current stored data in object
Usage:  obj.predict()
.INDENT 7.0
.INDENT 3.5
obj.predict(newdata)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBnewdata\fP (\fI\%dict\fP) \-\- dict containing new data for prediction (needs the keys below, if None predicts on training data)
.IP \(bu 2
\fBf\fP \-\- (M,N) matrix of functions
.IP \(bu 2
\fBtime\fP \-\- vector of time points
.IP \(bu 2
\fBy\fP \-\- truth if available
.IP \(bu 2
\fBsmooth\fP \-\- smooth data if needed
.IP \(bu 2
\fBsparam\fP \-\- number of times to run filter
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B elastic_glm_regression.rand(d0, d1, \&..., dn)
Random values in a given shape.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This is a convenience function for users porting code from Matlab,
and wraps \fIrandom_sample\fP\&. That function takes a
tuple to specify the size of the output, which is consistent with
other NumPy functions like \fInumpy.zeros\fP and \fInumpy.ones\fP\&.
.UNINDENT
.UNINDENT
.sp
Create an array of the given shape and populate it with
random samples from a uniform distribution
over \fB[0, 1)\fP\&.
.INDENT 7.0
.TP
.B d0, d1, ..., dn
int, optional
The dimensions of the returned array, must be non\-negative.
If no argument is given a single Python float is returned.
.UNINDENT
.INDENT 7.0
.TP
.B out
ndarray, shape \fB(d0, d1, ..., dn)\fP
Random values.
.UNINDENT
.sp
random
.sp
.nf
.ft C
>>> np.random.rand(3,2)
array([[ 0.14022471,  0.96360618],  #random
       [ 0.37601032,  0.25528411],  #random
       [ 0.49313049,  0.94909878]]) #random
.ft P
.fi
.UNINDENT
[image]
.SH ELASTIC FUNCTIONAL TOLERANCE BOUNDS
.sp
Functional Tolerance Bounds using SRSF
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B tolerance.bootTB(f, time, a=0.5, p=0.99, B=500, no=5, parallel=True)
This function computes tolerance bounds for functional data containing
phase and amplitude variation using bootstrap sampling
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBa\fP \-\- confidence level of tolerance bound (default = 0.05)
.IP \(bu 2
\fBp\fP \-\- coverage level of tolerance bound (default = 0.99)
.IP \(bu 2
\fBB\fP \-\- number of bootstrap samples (default = 500)
.IP \(bu 2
\fBno\fP \-\- number of principal components (default = 5)
.IP \(bu 2
\fBparallel\fP \-\- enable parallel processing (default = T)
.UNINDENT
.TP
.B Return type
tuple of boxplot objects
.TP
.B Return amp
amplitude tolerance bounds
.TP
.B Rtype out_med
ampbox object
.TP
.B Return ph
phase tolerance bounds
.TP
.B Rtype out_med
phbox object
.TP
.B Return out_med
alignment results
.TP
.B Rtype out_med
fdawarp object
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B tolerance.mvtol_region(x, alpha, P, B)
Computes tolerance factor for multivariate normal
.sp
Krishnamoorthy, K. and Mondal, S. (2006), Improved Tolerance Factors for Multivariate Normal
Distributions, Communications in Statistics \- Simulation and Computation, 35, 461–478.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP \-\- (M,N) matrix defining N variables of M samples
.IP \(bu 2
\fBalpha\fP \-\- confidence level
.IP \(bu 2
\fBP\fP \-\- coverage level
.IP \(bu 2
\fBB\fP \-\- number of bootstrap samples
.UNINDENT
.TP
.B Return type
double
.TP
.B Return tol
tolerance factor
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B tolerance.pcaTB(f, time, a=0.5, p=0.99, no=5, parallel=True)
This function computes tolerance bounds for functional data containing
phase and amplitude variation using fPCA
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of N functions with M samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size M describing the sample points
.IP \(bu 2
\fBa\fP \-\- confidence level of tolerance bound (default = 0.05)
.IP \(bu 2
\fBp\fP \-\- coverage level of tolerance bound (default = 0.99)
.IP \(bu 2
\fBno\fP \-\- number of principal components (default = 5)
.IP \(bu 2
\fBparallel\fP \-\- enable parallel processing (default = T)
.UNINDENT
.TP
.B Return type
tuple of boxplot objects
.TP
.B Return warp
alignment data from time_warping
.TP
.B Return pca
functional pca from jointFPCA
.TP
.B Return tol
tolerance factor
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B tolerance.rwishart(df, p)
Computes a random wishart matrix
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBdf\fP \-\- degree of freedom
.IP \(bu 2
\fBp\fP \-\- number of dimensions
.UNINDENT
.TP
.B Return type
double
.TP
.B Return R
matrix
.UNINDENT
.UNINDENT
[image]
.SH CURVE REGISTRATION
.sp
statistic calculation for SRVF (curves) open and closed using Karcher
Mean and Variance
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B class  curve_stats.fdacurve(beta, mode=\(aqO\(aq, N=200, scale=False)
This class provides alignment methods for open and closed curves using the SRVF framework
.sp
Usage: obj = fdacurve(beta, mode, N, scale)
:param beta: numpy ndarray of shape (n, M, N) describing N curves
in R^M
:param mode: Open (\(aqO\(aq) or closed curve (\(aqC\(aq) (default \(aqO\(aq)
:param N: resample curve to N points
:param scale: scale curve to length 1 (true/false)
:param q:           (n,T,K) matrix defining n dimensional srvf on T samples with K srvfs
:param betan:       aligned curves
:param qn:          aligned srvfs
:param basis:       calculated basis
:param beta_mean:   karcher mean curve
:param q_mean:      karcher mean srvf
:param gams:        warping functions
:param v:           shooting vectors
:param C:           karcher covariance
:param s:           pca singular values
:param U:           pca singular vectors
:param coef:        pca coefficients
:param pca          principal directions
:param qun:         cost function
:param samples:     random samples
:param gamr:        random warping functions
:param cent:        center
:param scale:       scale
:param len:         length of curve
:param len_q:       length of srvf
:param mean_scale   mean length
:param mean_scale_q mean length srvf
:param E:           energy
.sp
Author :  J. D. Tucker (JDT) <jdtuck AT sandia.gov>
Date   :  26\-Aug\-2020
.INDENT 7.0
.TP
.B karcher_cov()
This calculates the mean of a set of curves
.UNINDENT
.INDENT 7.0
.TP
.B karcher_mean(rotation=True, parallel=False, cores=\- 1, method=\(aqDP\(aq)
This calculates the mean of a set of curves
:param rotation: compute optimal rotation (default = T)
:param parallel: run in parallel (default = F)
:param cores: number of cores for parallel (default = \-1 (all))
:param method: method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.INDENT 7.0
.TP
.B plot()
plot curve mean results
.UNINDENT
.INDENT 7.0
.TP
.B sample_shapes(no=3, numSamp=10)
Computes sample shapes from mean and covariance
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBno\fP \-\- number of direction (default 3)
.IP \(bu 2
\fBnumSamp\fP \-\- number of samples (default 10)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B shape_pca(no=10)
Computes principal direction of variation specified by no. N is
Number of shapes away from mean. Creates 2*N+1 shape sequence
.INDENT 7.0
.TP
.B Parameters
\fBno\fP \-\- number of direction (default 3)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B srvf_align(rotation=True, parallel=False, cores=\- 1, method=\(aqDP\(aq)
This aligns a set of curves to the mean and computes mean if not computed
:param rotation: compute optimal rotation (default = T)
:param parallel: run in parallel (default = F)
:param cores: number of cores for parallel (default = \-1 (all))
:param method: method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_stats.randn(d0, d1, \&..., dn)
Return a sample (or samples) from the "standard normal" distribution.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
This is a convenience function for users porting code from Matlab,
and wraps \fIstandard_normal\fP\&. That function takes a
tuple to specify the size of the output, which is consistent with
other NumPy functions like \fInumpy.zeros\fP and \fInumpy.ones\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
New code should use the \fBstandard_normal\fP method of a \fBdefault_rng()\fP
instance instead; please see the random\-quick\-start\&.
.UNINDENT
.UNINDENT
.sp
If positive int_like arguments are provided, \fIrandn\fP generates an array
of shape \fB(d0, d1, ..., dn)\fP, filled
with random floats sampled from a univariate "normal" (Gaussian)
distribution of mean 0 and variance 1. A single float randomly sampled
from the distribution is returned if no argument is provided.
.INDENT 7.0
.TP
.B d0, d1, ..., dn
int, optional
The dimensions of the returned array, must be non\-negative.
If no argument is given a single Python float is returned.
.UNINDENT
.INDENT 7.0
.TP
.B Z
ndarray or float
A \fB(d0, d1, ..., dn)\fP\-shaped array of floating\-point samples from
the standard normal distribution, or a single such float if
no parameters were supplied.
.UNINDENT
.sp
standard_normal : Similar, but takes a tuple as its argument.
normal : Also accepts mu and sigma arguments.
Generator.standard_normal: which should be used for new code.
.sp
For random samples from N(\emu, \esigma^2), use:
.sp
\fBsigma * np.random.randn(...) + mu\fP
.sp
.nf
.ft C
>>> np.random.randn()
2.1923875335537315  # random
.ft P
.fi
.sp
Two\-by\-four array of samples from N(3, 6.25):
.sp
.nf
.ft C
>>> 3 + 2.5 * np.random.randn(2, 4)
array([[\-4.49401501,  4.00950034, \-1.81814867,  7.29718677],   # random
       [ 0.39924804,  4.68456316,  4.99394529,  4.84057254]])  # random
.ft P
.fi
.UNINDENT
[image]
.SH SRVF GEODESIC COMPUTATION
.sp
geodesic calculation for SRVF (curves) open and closed
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B geodesic.back_parallel_transport(u1, alpha, basis, T=100, k=5)
backwards parallel translates q1 and q2 along manifold
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBu1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBalpha\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbasis\fP \-\- list numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return utilde
translated vector
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.calc_alphadot(alpha, basis, T=100, k=5)
calculates derivative along the path alpha
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbasis\fP \-\- list of numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return alphadot
derivative of alpha
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.calculate_energy(alphadot, T=100, k=5)
calculates energy along path
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalphadot\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy scalar
.TP
.B Return E
energy
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.calculate_gradE(u, utilde, T=100, k=5)
calculates gradient of energy along path
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBu\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fButilde\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy scalar
.TP
.B Return gradE
gradient of energy
.TP
.B Return normgradE
norm of gradient of energy
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.cov_integral(alpha, alphadot, basis, T=100, k=5)
Calculates covariance along path alpha
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- numpy ndarray of shape (2,M) of M samples (first curve)
.IP \(bu 2
\fBalphadot\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbasis\fP \-\- list numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return u
covariance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.find_basis_normal_path(alpha, k=5)
computes orthonormalized basis vectors to the normal space at each of the
k points (q\-functions) of the path alpha
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- numpy ndarray of shape (2,M) of M samples (path)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return basis
basis vectors along the path
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.geod_dist_path_strt(beta, k=5)
calculate geodisc distance for path straightening
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy scalar
.TP
.B Return dist
geodesic distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.geod_sphere(beta1, beta2, k=5, scale=False, rotation=True, center=True)
This function calculates the geodesics between open curves beta1 and
beta2 with k steps along path
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.IP \(bu 2
\fBscale\fP \-\- include length (Default = False)
.IP \(bu 2
\fBrotation\fP \-\- include rotation (Default = True)
.IP \(bu 2
\fBcenter\fP \-\- center curves at origin (Default = True)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return dist
geodesic distance
.TP
.B Return path
geodesic path
.TP
.B Return O
rotation matrix
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.init_path_geod(beta1, beta2, T=100, k=5)
Initializes a path in \ecal{C}\&. beta1, beta2 are already
standardized curves. Creates a path from beta1 to beta2 in
shape space, then projects to the closed shape manifold.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples (first curve)
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples (end curve)
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return alpha
a path between two q\-functions
.TP
.B Return beta
a path between two curves
.TP
.B Return O
rotation matrix
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.init_path_rand(beta1, beta_mid, beta2, T=100, k=5)
Initializes a path in \ecal{C}\&. beta1, beta_mid beta2 are already
standardized curves. Creates a path from beta1 to beta_mid to beta2 in
shape space, then projects to the closed shape manifold.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples (first curve)
.IP \(bu 2
\fBbetamid\fP \-\- numpy ndarray of shape (2,M) of M samples (mid curve)
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples (end curve)
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return alpha
a path between two q\-functions
.TP
.B Return beta
a path between two curves
.TP
.B Return O
rotation matrix
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.path_straightening(beta1, beta2, betamid, init=\(aqrand\(aq, T=100, k=5)
Perform path straightening to find geodesic between two shapes in either
the space of closed curves or the space of affine standardized curves.
This algorithm follows the steps outlined in section 4.6 of the
manuscript.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples (first curve)
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples (end curve)
.IP \(bu 2
\fBbetamid\fP \-\- numpy ndarray of shape (2,M) of M samples (mid curve
Default = NULL, only needed for init "rand")
.IP \(bu 2
\fBinit\fP \-\- initialize path geodesic or random (Default = "rand")
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return dist
geodesic distance
.TP
.B Return path
geodesic path
.TP
.B Return pathsqnc
geodesic path sequence
.TP
.B Return E
energy
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B geodesic.update_path(alpha, beta, gradE, delta, T=100, k=5)
Update the path along the direction \-gradE
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBalpha\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBgradE\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBdelta\fP \-\- gradient paramenter
.IP \(bu 2
\fBT\fP \-\- Number of samples of curve (Default = 100)
.IP \(bu 2
\fBk\fP \-\- number of samples along path (Default = 5)
.UNINDENT
.TP
.B Return type
numpy scalar
.TP
.B Return alpha
updated path of srvfs
.TP
.B Return beta
updated path of curves
.UNINDENT
.UNINDENT
[image]
.SH UTILITY FUNCTIONS
.sp
Utility functions for SRSF Manipulations
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B utility_functions.SqrtMean(gam, parallel=False, cores=\- 1)
calculates the srsf of warping functions with corresponding shooting vectors
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgam\fP \-\- numpy ndarray of shape (M,N) of M warping functions
with N samples
.IP \(bu 2
\fBparallel\fP \-\- run in parallel (default = F)
.IP \(bu 2
\fBcores\fP \-\- number of cores for parallel (default = \-1 (all))
.UNINDENT
.TP
.B Return type
2 numpy ndarray and vector
.TP
.B Return mu
Karcher mean psi function
.TP
.B Return gam_mu
vector of dim N which is the Karcher mean warping function
.TP
.B Return psi
numpy ndarray of shape (M,N) of M SRSF of the warping functions
.TP
.B Return vec
numpy ndarray of shape (M,N) of M shooting vectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.SqrtMeanInverse(gam)
finds the inverse of the mean of the set of the diffeomorphisms gamma
.INDENT 7.0
.TP
.B Parameters
\fBgam\fP \-\- numpy ndarray of shape (M,N) of M warping functions
with N samples
.TP
.B Return type
vector
.TP
.B Return gamI
inverse of gam
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.SqrtMedian(gam)
calculates the median srsf of warping functions with corresponding shooting vectors
.INDENT 7.0
.TP
.B Parameters
\fBgam\fP \-\- numpy ndarray of shape (M,N) of M warping functions
with N samples
.TP
.B Return type
2 numpy ndarray and vector
.TP
.B Return gam_median
Karcher median warping function
.TP
.B Return psi_meidan
vector of dim N which is the Karcher median srsf function
.TP
.B Return psi
numpy ndarray of shape (M,N) of M SRSF of the warping functions
.TP
.B Return vec
numpy ndarray of shape (M,N) of M shooting vectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.cumtrapzmid(x, y, c, mid)
cumulative trapezoidal numerical integration taken from midpoint
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP \-\- vector of size N describing the time samples
.IP \(bu 2
\fBy\fP \-\- vector of size N describing the function
.IP \(bu 2
\fBc\fP \-\- midpointtic
.IP \(bu 2
\fBmid\fP \-\- midpiont location
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return fa
cumulative integration
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.diffop(n, binsize=1)
Creates a second order differential operator
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBn\fP \-\- dimension
.IP \(bu 2
\fBbinsize\fP \-\- dx (default = 1)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return m
matrix describing differential operator
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.elastic_depth(f, time, method=\(aqDP2\(aq, lam=0.0, parallel=True)
calculates the elastic depth between functions in matrix f
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- matrix of size MxN (M time points for N functions)
.IP \(bu 2
\fBtime\fP \-\- vector of size M describing the sample points
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP2") options are "DP","DP2","RBFGS"
.IP \(bu 2
\fBlam\fP \-\- controls the elasticity (default = 0.0)
.UNINDENT
.TP
.B Return type
scalar
.TP
.B Return amp
amplitude depth
.TP
.B Return phase
phase depth
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.elastic_distance(f1, f2, time, method=\(aqDP2\(aq, lam=0.0)
"
calculates the distances between function, where f1 is aligned to
f2. In other words
calculates the elastic distances
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf1\fP \-\- vector of size N
.IP \(bu 2
\fBf2\fP \-\- vector of size N
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP2") options are "DP","DP2","RBFGS"
.IP \(bu 2
\fBlam\fP \-\- controls the elasticity (default = 0.0)
.UNINDENT
.TP
.B Return type
scalar
.TP
.B Return Dy
amplitude distance
.TP
.B Return Dx
phase distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.f_K_fold(Nobs, K=5)
generates sample indices for K\-fold cross validation
.sp
:param Nobs number of observations
:param K number of folds
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return train
train indexes (Nobs*(K\-1)/K X K)
.TP
.B Return test
test indexes (Nobs*(1/K) X K)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.f_to_srsf(f, time, smooth=False)
converts f to a square\-root slope function (SRSF)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- vector of size N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return q
srsf of f
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.geigen(Amat, Bmat, Cmat)
generalized eigenvalue problem of the form
.sp
max tr L\(aqAM / sqrt(tr L\(aqBL tr M\(aqCM) w.r.t. L and M
.sp
:param Amat numpy ndarray of shape (M,N)
:param Bmat numpy ndarray of shape (M,N)
:param Bmat numpy ndarray of shape (M,N)
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return values
eigenvalues
.TP
.B Return Lmat
left eigenvectors
.TP
.B Return Mmat
right eigenvectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.gradient_spline(time, f, smooth=False)
This function takes the gradient of f using b\-spline smoothing
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBsmooth\fP \-\- smooth data (default = F)
.UNINDENT
.TP
.B Return type
tuple of numpy ndarray
.TP
.B Return f0
smoothed functions functions
.TP
.B Return g
first derivative of each function
.TP
.B Return g2
second derivative of each function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.innerprod_q(time, q1, q2)
calculates the innerproduct between two srsfs
.sp
:param time vector descrbing time samples
:param q1 vector of srsf 1
:param q2 vector of srsf 2
.INDENT 7.0
.TP
.B Return type
scalar
.TP
.B Return val
inner product value
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.invertGamma(gam)
finds the inverse of the diffeomorphism gamma
.INDENT 7.0
.TP
.B Parameters
\fBgam\fP \-\- vector describing the warping function
.TP
.B Return type
vector
.TP
.B Return gamI
inverse of gam
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.optimum_reparam(q1, time, q2, method=\(aqDP2\(aq, lam=0.0, grid_dim=7)
calculates the warping to align srsf q2 to q1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- vector of size N or array of NxM samples of first SRSF
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq2\fP \-\- vector of size N or array of NxM samples samples of second SRSF
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP2") options are "DP","DP2","RBFGS"
.IP \(bu 2
\fBlam\fP \-\- controls the amount of elasticity (default = 0.0)
.IP \(bu 2
\fBgrid_dim\fP \-\- size of the grid, for the DP2 method only (default = 7)
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return gam
describing the warping function used to align q2 with q1
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.optimum_reparam_pair(q, time, q1, q2, lam=0.0)
calculates the warping to align srsf pair q1 and q2 to q
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP \-\- vector of size N or array of NxM samples of first SRSF
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq1\fP \-\- vector of size N or array of NxM samples samples of second SRSF
.IP \(bu 2
\fBq2\fP \-\- vector of size N or array of NxM samples samples of second SRSF
.IP \(bu 2
\fBlam\fP \-\- controls the amount of elasticity (default = 0.0)
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return gam
describing the warping function used to align q2 with q1
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.outlier_detection(q, time, mq, k=1.5)
calculates outlier\(aqs using geodesic distances of the SRSFs from the median
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of N x M of M SRS functions with N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBmq\fP \-\- median calculated using \fBtime_warping.srsf_align()\fP
.IP \(bu 2
\fBk\fP \-\- cutoff threshold (default = 1.5)
.UNINDENT
.TP
.B Returns
q_outlier: outlier functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.randomGamma(gam, num)
generates random warping functions
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgam\fP \-\- numpy ndarray of N x M of M of warping functions
.IP \(bu 2
\fBnum\fP \-\- number of random functions
.UNINDENT
.TP
.B Returns
rgam: random warping functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.resamplefunction(x, n)
resample function using n points
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP \-\- functions
.IP \(bu 2
\fBn\fP \-\- number of points
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return xn
resampled function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.rgam(N, sigma, num)
Generates random warping functions
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBN\fP \-\- length of warping function
.IP \(bu 2
\fBsigma\fP \-\- variance of warping functions
.IP \(bu 2
\fBnum\fP \-\- number of warping functions
.UNINDENT
.TP
.B Returns
gam: numpy ndarray of warping functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.smooth_data(f, sparam=1)
This function smooths a collection of functions using a box filter
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBsparam\fP \-\- Number of times to run box filter (default = 25)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return f
smoothed functions functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.srsf_to_f(q, time, f0=0.0)
converts q (srsf) to a function
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP \-\- vector of size N samples of srsf
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing time sample points
.IP \(bu 2
\fBf0\fP \-\- initial value
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return f
function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.update_progress(progress)
This function creates a progress bar
.INDENT 7.0
.TP
.B Parameters
\fBprogress\fP \-\- fraction of progress
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.warp_f_gamma(time, f, gam)
warps a function f by gam
.sp
:param time vector describing time samples
:param q vector describing srsf
:param gam vector describing warping function
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return f_temp
warped srsf
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.warp_q_gamma(time, q, gam)
warps a srsf q by gam
.sp
:param time vector describing time samples
:param q vector describing srsf
:param gam vector describing warping function
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return q_temp
warped srsf
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.zero_crossing(Y, q, bt, time, y_max, y_min, gmax, gmin)
finds zero\-crossing of optimal gamma, gam = s*gmax + (1\-s)*gmin
from elastic regression model
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBY\fP \-\- response
.IP \(bu 2
\fBq\fP \-\- predicitve function
.IP \(bu 2
\fBbt\fP \-\- basis function
.IP \(bu 2
\fBtime\fP \-\- time samples
.IP \(bu 2
\fBy_max\fP \-\- maximum repsonse for warping function gmax
.IP \(bu 2
\fBy_min\fP \-\- minimum response for warping function gmin
.IP \(bu 2
\fBgmax\fP \-\- max warping function
.IP \(bu 2
\fBgmin\fP \-\- min warping fucntion
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return gamma
optimal warping function
.UNINDENT
.UNINDENT
[image]
.SH CURVE FUNCTIONS
.sp
functions for SRVF curve manipulations
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B curve_functions.Basis_Normal_A(q)
Find Normal Basis
.INDENT 7.0
.TP
.B Parameters
\fBq\fP \-\- numpy ndarray (n,T) defining T points on n dimensional SRVF
.UNINDENT
.sp
:rtype list
:return delg: basis
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.calc_j(basis)
Calculates Jacobian matrix from normal basis
.INDENT 7.0
.TP
.B Parameters
\fBbasis\fP \-\- list of numpy ndarray of shape (2,M) of M samples basis
.TP
.B Return type
numpy ndarray
.TP
.B Return j
Jacobian
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.calculate_variance(beta)
This function calculates variance of curve beta
.INDENT 7.0
.TP
.B Parameters
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.TP
.B Return type
numpy ndarray
.TP
.B Return variance
variance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.calculatecentroid(beta)
This function calculates centroid of a parameterized curve
.INDENT 7.0
.TP
.B Parameters
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.TP
.B Return type
numpy ndarray
.TP
.B Return centroid
center coordinates
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.curve_to_q(beta, mode=\(aqO\(aq)
This function converts curve beta to srvf q
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBmode\fP \-\- Open (\(aqO\(aq) or closed curve (\(aqC\(aq) (default \(aqO\(aq)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return q
srvf of curve
.TP
.B Return lenb
length of curve
.TP
.B Return lenq
length of srvf
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.curve_zero_crossing(Y, q, bt, y_max, y_min, gmax, gmin)
finds zero\-crossing of optimal gamma, gam = s*gmax + (1\-s)*gmin
from elastic curve regression model
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBY\fP \-\- response
.IP \(bu 2
\fBbeta\fP \-\- predicitve function
.IP \(bu 2
\fBbt\fP \-\- basis function
.IP \(bu 2
\fBy_max\fP \-\- maximum repsonse for warping function gmax
.IP \(bu 2
\fBy_min\fP \-\- minimum response for warping function gmin
.IP \(bu 2
\fBgmax\fP \-\- max warping function
.IP \(bu 2
\fBgmin\fP \-\- min warping fucntion
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return gamma
optimal warping function
.TP
.B Return O_hat
rotation matrix
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.elastic_distance_curve(beta1, beta2, closed=0, rotation=True, scale=False, method=\(aqDP\(aq)
Calculates the two elastic distances between two curves
:param beta1: numpy ndarray of shape (2,M) of M samples
:param beta2: numpy ndarray of shape (2,M) of M samples
:param closed: open (0) or closed (1) curve (default=0)
:param rotation: compute optimal rotation (default=True)
:param scale: include scale (default=False)
:param method: method to apply optimization (default="DP") options are "DP" or "RBFGS"
.INDENT 7.0
.TP
.B Return type
\fI\%tuple\fP
.TP
.B Return dist
shape distance
.TP
.B Return dx
phase distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.elastic_shooting(q1, v, mode=0)
Calculates shooting vector from v to q1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- vector of srvf
.IP \(bu 2
\fBv\fP \-\- shooting vector
.IP \(bu 2
\fBmode\fP \-\- closed or open (1/0)
.UNINDENT
.UNINDENT
.sp
:rtype numpy ndarray
:return q2n: vector of srvf
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.elastic_shooting_vector(q1, q2, mode=0)
Calculates shooting between two srvfs
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- vector of srvf
.IP \(bu 2
\fBq2\fP \-\- vector of srvf
.IP \(bu 2
\fBmode\fP \-\- closed or open (1/0)
.UNINDENT
.UNINDENT
.sp
:rtype numpy ndarray
:return v: shooting vector
:return d: distance
:return q2n: aligned srvf
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.find_basis_normal(q)
Finds the basis normal to the srvf
.INDENT 7.0
.TP
.B Parameters
\fBq1\fP \-\- numpy ndarray of shape (2,M) of M samples
.TP
.B Return type
list of numpy ndarray
.TP
.B Return basis
list containing basis vectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.find_best_rotation(q1, q2, allow_reflection=False, only_xy=False)
This function calculates the best rotation between two srvfs using
procustes rigid alignment
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBallow_reflection\fP \-\- bool indicating if reflection is allowed 
(i.e. if the determinant of the optimal 
rotation can be \-1)
.IP \(bu 2
\fBonly_xy\fP \-\- bool indicating if rotation should only be allowed 
in the first two dimensions of the space
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return q2new
optimal rotated q2 to q1
.TP
.B Return R
rotation matrix
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.find_rotation_and_seed_coord(beta1, beta2, closed=0, rotation=True, method=\(aqDP\(aq)
This function returns a candidate list of optimally oriented and
registered (seed) shapes w.r.t. beta1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBclosed\fP \-\- Open (0) or Closed (1)
.IP \(bu 2
\fBrotation\fP \-\- find rotation (default=True)
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return beta2new
optimal aligned beta2 to beta1
.TP
.B Return q2best
optimal aligned q2 to q1
.TP
.B Return Rbest
rotation matrix
.TP
.B Return gamIbest
warping function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.find_rotation_and_seed_q(q1, q2, closed=0, rotation=True, method=\(aqDP\(aq)
This function returns a candidate list of optimally oriented and
registered (seed) srvs w.r.t. q1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBclosed\fP \-\- Open (0) or Closed (1)
.IP \(bu 2
\fBrotation\fP \-\- find rotation (default=True)
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return q2best
optimal aligned q2 to q1
.TP
.B Return Rbest
rotation matrix
.TP
.B Return gamIbest
warping function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.find_rotation_and_seed_unique(q1, q2, closed=0, rotation=True, method=\(aqDP\(aq)
This function returns a candidate list of optimally oriented and
registered (seed) shapes w.r.t. beta1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBclosed\fP \-\- Open (0) or Closed (1)
.IP \(bu 2
\fBrotation\fP \-\- find rotation (default=True)
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return beta2new
optimal rotated beta2 to beta1
.TP
.B Return O
rotation matrix
.TP
.B Return tau
seed
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.gram_schmidt(basis)
Performs Gram Schmidt Orthogonlization of a basis_o
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B param basis
list of numpy ndarray of shape (2,M) of M samples
.TP
.B rtype
list of numpy ndarray
.TP
.B return basis_o
orthogonlized basis
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.group_action_by_gamma(q, gamma)
This function reparamerized srvf q by gamma
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBgamma\fP \-\- numpy ndarray of shape (2,M) of M samples
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return qn
reparatermized srvf
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.group_action_by_gamma_coord(f, gamma)
This function reparamerized curve f by gamma
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBgamma\fP \-\- numpy ndarray of shape (2,M) of M samples
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return fn
reparatermized curve
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.innerprod_q2(q1, q2)
This function calculates the inner product in srvf space
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq2\fP \-\- numpy ndarray of shape (2,M) of M samples
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return val
inner product
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.inverse_exp(q1, q2, beta2)
Calculate the inverse exponential to obtain a shooting vector from
q1 to q2 in shape space of open curves
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return v
shooting vectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.inverse_exp_coord(beta1, beta2, closed=0, method=\(aqDP\(aq)
Calculate the inverse exponential to obtain a shooting vector from
beta1 to beta2 in shape space of open curves
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbeta2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBclosed\fP \-\- open (0) or closed (1) curve
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return v
shooting vectors
.TP
.B Return dist
distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.optimum_reparam_curve(q1, q2, lam=0.0, method=\(aqDP\(aq)
calculates the warping to align srsf q2 to q1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- matrix of size nxN or array of NxM samples of first SRVF
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq2\fP \-\- matrix of size nxN or array of NxM samples samples of second SRVF
.IP \(bu 2
\fBlam\fP \-\- controls the amount of elasticity (default = 0.0)
.IP \(bu 2
\fBmethod\fP \-\- method to apply optimization (default="DP") options are "DP" or "RBFGS"
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return gam
describing the warping function used to align q2 with q1
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.parallel_translate(w, q1, q2, basis, mode=0)
parallel translates q1 and q2 along manifold
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBw\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq1\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq2\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbasis\fP \-\- list of numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBmode\fP \-\- open 0 or closed curves 1 (default 0)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return wbar
translated vector
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.pre_proc_curve(beta, T=100)
This function prepcoessed a curve beta to set of closed curves
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBT\fP \-\- number of samples (default = 100)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return betanew
projected beta
.TP
.B Return qnew
projected srvf
.TP
.B Return A
alignment matrix (not used currently)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.project_curve(q)
This function projects srvf q to set of close curves
.INDENT 7.0
.TP
.B Parameters
\fBq\fP \-\- numpy ndarray of shape (2,M) of M samples
.TP
.B Return type
numpy ndarray
.TP
.B Return qproj
project srvf
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.project_tangent(w, q, basis)
projects srvf to tangent space w using basis
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBw\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBbasis\fP \-\- list of numpy ndarray of shape (2,M) of M samples
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return wproj
projected q
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.psi(x, a, q)
This function formats variance output
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP \-\- numpy ndarray of shape (2,M) of M samples curve
.IP \(bu 2
\fBa\fP \-\- numpy ndarray of shape (2,1) mean
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of shape (2,M) of M samples srvf
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return psi1
variance
.TP
.B Return psi2
cross variance
.TP
.B Return psi3
curve end
.TP
.B Return psi4
curve end
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.q_to_curve(q, scale=1)
This function converts srvf to beta
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of shape (n,M) of M samples
.IP \(bu 2
\fBscale\fP \-\- scale of curve
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return beta
parameterized curve
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.resamplecurve(x, N=100, time=None, mode=\(aqO\(aq)
This function resamples a curve to have N samples
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBN\fP \-\- Number of samples for new curve (default = 100)
.IP \(bu 2
\fBtime\fP \-\- timing vector (Default=None)
.IP \(bu 2
\fBmode\fP \-\- Open (\(aqO\(aq) or closed curve (\(aqC\(aq) (default \(aqO\(aq)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return xn
resampled curve
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.scale_curve(beta)
scales curve to length 1
.INDENT 7.0
.TP
.B Parameters
\fBbeta\fP \-\- numpy ndarray of shape (2,M) of M samples
.TP
.B Return type
numpy ndarray
.TP
.B Return beta_scaled
scaled curve
.TP
.B Return scale
scale factor used
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B curve_functions.shift_f(f, tau)
shifts a curve f by tau
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (2,M) of M samples
.IP \(bu 2
\fBtau\fP \-\- scalar
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return fn
shifted curve
.UNINDENT
.UNINDENT
[image]
.SH UMAP EFDA METRICS
.sp
Distance metrics for functions and curves in R^n for use with UMAP
(\fI\%https://github.com/lmcinnes/umap\fP)
.sp
moduleauthor:: J. Derek Tucker <\fI\%jdtuck@sandia.gov\fP>
.INDENT 0.0
.TP
.B umap_metric.efda_distance(q1, q2)
"
calculates the distances between two curves, where 
q2 is aligned to q1. In other words calculates the elastic distances/
This metric is set up for use with UMAP or t\-sne from scikit\-learn
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- vector of size N
.IP \(bu 2
\fBq2\fP \-\- vector of size N
.UNINDENT
.TP
.B Return type
scalar
.TP
.B Return dist
amplitude distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B umap_metric.efda_distance_curve(beta1, beta2, closed)
"
calculates the distances between two curves, where 
beta2 is aligned to beta1. In other words calculates the elastic distance.
This metric is set up for use with UMAP or t\-sne from scikit\-learn
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBbeta1\fP \-\- vector of size n*M
.IP \(bu 2
\fBbeta2\fP \-\- vector of size n*M
.IP \(bu 2
\fBclosed\fP \-\- .INDENT 2.0
.IP 0. 4
if open curves and (1) if closed curves
.UNINDENT

.UNINDENT
.TP
.B Return type
scalar
.TP
.B Return dist
shape distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Tucker, J. D. 2014, Functional Component Analysis and Regression using Elastic
Methods. Ph.D. Thesis, Florida State University.
.sp
Robinson, D. T. 2012, Function Data Analysis and Partial Shape Matching in the
Square Root Velocity Framework. Ph.D. Thesis, Florida State University.
.sp
Huang, W. 2014, Optimization Algorithms on Riemannian Manifolds with
Applications. Ph.D. Thesis, Florida State University.
.sp
Srivastava, A., Wu, W., Kurtek, S., Klassen, E. and Marron, J. S. (2011).
Registration of Functional Data Using Fisher\-Rao Metric. arXiv:1103.3817v2
[math.ST].
.sp
Tucker, J. D., Wu, W. and Srivastava, A. (2013). Generative models for
functional data using phase and amplitude separation. Computational Statistics
and Data Analysis 61, 50\-66.
.sp
J. D. Tucker, W. Wu, and A. Srivastava, "Phase\-Amplitude Separation of
Proteomics Data Using Extended Fisher\-Rao Metric," Electronic Journal of
Statistics, Vol 8, no. 2. pp 1724\-1733, 2014.
.sp
J. D. Tucker, W. Wu, and A. Srivastava, "Analysis of signals under compositional
noise With applications to SONAR data," IEEE Journal of Oceanic Engineering, Vol
29, no. 2. pp 318\-330, Apr 2014.
.sp
Srivastava, A., Klassen, E., Joshi, S., Jermyn, I., (2011). Shape analysis of
elastic curves in euclidean spaces. Pattern Analysis and Machine Intelligence,
IEEE Transactions on 33 (7), 1415\-1428.
.sp
S. Kurtek, A. Srivastava, and W. Wu. Signal estimation under random
time\-warpings and nonlinear signal alignment. In Proceedings of Neural
Information Processing Systems (NIPS), 2011.
.sp
Wen Huang, Kyle A. Gallivan, Anuj Srivastava, Pierre\-Antoine Absil. "Riemannian
Optimization for Elastic Shape Analysis", Short version, The 21st International
Symposium on Mathematical Theory of Networks and Systems (MTNS 2014).
.sp
Cheng, W., Dryden, I. L., and Huang, X. (2016). Bayesian registration of functions
and curves. Bayesian Analysis, 11(2), 447\-475.
.sp
W. Xie, S. Kurtek, K. Bharath, and Y. Sun, A geometric approach to visualization
of variability in functional data, Journal of American Statistical Association 112
(2017), pp. 979\-993.
.sp
Lu, Y., R. Herbei, and S. Kurtek, 2017: Bayesian registration of functions with a
Gaussian process prior. Journal of Computational and Graphical Statistics, 26, no. 4, 894–904.
.sp
Lee, S. and S. Jung, 2017: Combined analysis of amplitude and phase variations in
functional data. arXiv:1603.01775 [stat.ME], 1–21.
.sp
J. D. Tucker, J. R. Lewis, and A. Srivastava, “Elastic Functional Principal Component
Regression,” Statistical Analysis and Data Mining, vol. 12, no. 2, pp. 101\-115, 2019.
.sp
J. D. Tucker, J. R. Lewis, C. King, and S. Kurtek, “A Geometric Approach for Computing
Tolerance Bounds for Elastic Functional Data,” Journal of Applied Statistics, 10.1080/02664763.2019.1645818, 2019.
.sp
T. Harris, J. D. Tucker, B. Li, and L. Shand, "Elastic depths for detecting shape
anomalies in functional data," Technometrics, 10.1080/00401706.2020.1811156, 2020.
.sp
M. K. Ahn, J. D. Tucker, W. Wu, and A. Srivastava. “Regression Models Using Shapes
of Functions as Predictors” Computational Statistics and Data Analysis, 10.1016/j.csda.2020.107017, 2020.
.INDENT 0.0
.IP J. 3
.INDENT 3.0
.IP D. 3
Tucker, L. Shand, and K. Chowdhary. “Multimodal Bayesian Registration of Noisy Functions using Hamiltonian Monte Carlo”, Computational Statistics and Data Analysis, accepted, 2021.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
J. Derek Tucker
.SH COPYRIGHT
2022, J. Derek Tucker
.\" Generated by docutils manpage writer.
.
